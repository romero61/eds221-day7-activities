---
title: "Activities"
format: html
editor: visual
editor_options: 
  chunk_output_type: inline
---

```{r, include= FALSE}
library(tidyverse)

```

-   Read in the data sets and store the data frames as `bird_observations`, `sites`, `surveys`, and `taxalist` (it should be clear from the raw file names which is which)

-   

```{r, include = FALSE}

bird_observations <-
      read_csv(here::here("data", "knb-lter-cap.256.10", "52_pp52_birds_1.csv"))
sites <-
read_csv(here::here("data", "knb-lter-cap.256.10", "52_pp52_sites_1.csv"))
    
surveys <-
  read_csv(here::here("data", "knb-lter-cap.256.10", "52_pp52_surveys_1.csv"))
    
taxalist <-
  read_csv(here::here("data", "knb-lter-cap.256.10", "52_pp52_taxalist_1.csv"))

```

-   Create a subset of `bird_observations` called `birds_subset` that only contains observations for birds with species id "BHCO" and "RWBL", and from sites with site ID "LI-W" and "NU-C"

```{r}
birds_subset <- bird_observations |> 
  filter(species_id %in% c("BHCO", "RWBL")) |> 
  filter(site_id %in% c("LI-W","NU-C"))

birds_subset
```

# Left join practice

Use left join(s) to update birds_subset so that it also includes sites and taxalist information. For each join, include an explicit argument saying which variable you are joining by (even if it will just assume the correct one for you). Store the updated data frame as birds_left. Make sure to look at the output - is what it contains consistent with what you expected it to contain?

```{r}
birds_left <- birds_subset |> 
  left_join(sites, by = "site_id") |>
  left_join(taxalist, by = 'species_id')
birds_left
```

Full join practice First, answer: what do you expect a full_join() between birds_subset and sites to contain?

Write code to full_join the birds_subset and sites data into a new object called birds_full. Explicitly include the variable you're joining by. Look at the output. Is it what you expected?

```{r}
names(birds_subset)
names(sites)

# "survey_id"  "site_id"    "species_id" "distance"   "bird_count" "notes"     
# "seen"       "heard"      "direction" 
#      "park_code"      "park_district"  "park_name"     
# "point_code"     "point_location" "park_acreage" "

birds_full <- birds_subset |> 
  full_join(sites, by = 'site_id')
birds_full
```

# Inner join practice

First, answer: what do you expect an inner_join() between birds_subset and taxalist to contain?

Write code to inner_join() the birds_subset and taxalist, called birds_inner. Include an argument for what variable you'll be joining by.

What would you get if instead of inner_join() you'd used left_join() for this example? Try it out & check. Why does that make sense for this scenario? It what case would you expect the outcome to differ from an inner_join()?

```{r}
names(birds_subset)
names(taxalist) # key match 
birds_inner <- birds_subset |> 
  inner_join(taxalist, by = "species_id")

birds_left2 <- birds_subset |> 
  left_join(taxalist, by = "species_id")
birds_inner
birds_left2
```

# Task 2:

Starting with your birds object, rename the notes column to bird_obs_notes (so this doesn't conflict with notes in the surveys dataset

Then, create a subset that contains all observations in the birds dataset, joins the taxonomic, site and survey information to it, and is finally limited to only columns survey_date, common_name, park_name, and bird_count. You can decide the order that you want to create this in (e.g. limit the columns first, then join, or the other way around).

Use lubridate::month() to add a new column called survey_month, containing only the month number. Then, convert the month number to a factor (again within mutate())

```{r}

birds_subset <- bird_observations |>
  rename(birds_obs_notes = notes)
birds_subset

birds_all <- birds_subset |> 
  left_join(surveys) |> 
  left_join(sites) |> 
  left_join(taxalist) |> 
  select(survey_date, common_name, park_name, bird_count) |> 
  mutate(survey_month = lubridate::month(survey_date)) |> 
  mutate(survey_month = as.factor(survey_month))
birds_all

birds_count <- birds_all |> 
  relocate(survey_month, .after = survey_date) |> 
  group_by(park_name, survey_month) |> 
  #mistake use summarize
  #mutate(total_birds = sum(bird_count, na.rm = TRUE) ) |> 
  summarize(total_birds = sum(bird_count, na.rm = TRUE) ) |>   # filter((park_name == "Lindo" & park_name == "Orme" & park_name == "Palomino" & parke_name == "Sonrisa"), na.rm == TRUE)
  filter(park_name %in% c('Lindo',"Orme","Palomino","Sonrisa"), na.rm = TRUE)
  
unique(birds_count$park_name)
names(birds_count)
birds_count

######################################################################
birds_df <- bird_observations %>% 
  select(-notes) %>% 
  left_join(surveys) %>% 
  left_join(sites) %>% 
  left_join(taxalist) %>% 
  select(survey_date, park_name, common_name, bird_count)
birds_df
birds_df <- birds_df %>% 
  mutate(survey_month = lubridate::month(survey_date)) %>% 
  mutate(survey_month = as.factor(survey_month)) %>% 
  relocate(survey_month, .after = survey_date)
birds_df
birds_park_month <- birds_df %>% 
  group_by(park_name, survey_month) %>% 
  summarize(total_birds = sum(bird_count, na.rm = TRUE)) %>% 
  ungroup() %>% 
  filter(park_name %in% c("Lindo", "Orme", "Palomino", "Sonrisa"))
birds_park_month
birds_count
```

Learn a new function on your own! Use dplyr::relocate() to move the new survey_month column to immediately after the survey_date column. You can do this in a separate code chunk, or pipe straight into it from your existing code.

Find the total number of birds observed by park and month (i.e., you'll group_by(park_name, survey_month))

Filter to only include parks "Lindo", "Orme", "Palomino" and "Sonrisa"

```{r}


```

# Practice with strings

```{r}
alarm_report <- tibble::tribble(
         ~date,           ~building,                                              ~alarm_message,
  "2020-03-14", "Engineering-North", "10:02am – HVAC system down, facilities management alerted",
  "2020-03-15",         "Bren Hall",                    "8:24am – Elevator North out of service",
  "2020-04-10", "Engineering-South",     "12:41am – Fire alarm, UCSB fire responded and cleared",
  "2020-04-18",        "Engr-North",     "9:58pm – Campus point emergency siren, UCPD responded"
  )

```

-   Practice working with strings by writing code to update `alarm_report` as follows (these can be separate, or all as part of a piped sequence):

    -   Replace the \"Engr\" with \"Engineering\" in the `building` column

    -   Separate the `building` column into two separate columns, `building` and `wing`, separated at the dash

    -   Only keep observations with the word \"responded\" in the `alarm_message` column

    -   Separate the message *time* from the rest of the message by separating at `--`

    -   Convert the date column to a Date class using `lubridate`

```{r}
alarm_report2 <- alarm_report |> 
  mutate(building = str_replace(building,
                                pattern = "Engr",
                                replacement = "Engineering")) |> separate(building, into = c("building", "wing"), sep = "-") |> 
  filter(str_detect(alarm_message, pattern = "responded")) |> 
  separate(col = alarm_message, into = c("time","alarm_message"), sep = "–"  ) |> mutate(date = lubridate::ymd(date))
  # mutate(date = lubridate::as_date(date))
alarm_report2
```
